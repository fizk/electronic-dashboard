import React, { useState } from 'react';
import { LabelInput } from '../elements/Form';
import classVariant from '../helpers/classVariant';
import type {ChangeEvent} from 'react';
import type { ValueItemEntry } from '../types';
import '../elements/Table.css';
import './Levelshifter.css';

interface Props {
    values: ValueItemEntry[]
    allValues: boolean
}

interface TableFormat {
    active: number
    id: string
    text: string
    tolerance: string
    value: number
}

type TableRow = [[number,TableFormat], [number, TableFormat], [number, TableFormat]];

export default function Levelshifter ({values, allValues}: Props) {
    const [table, setTable] = useState<TableRow[]>([])
    const baseValues = [
        1.0,
        1.1,
        1.2,
        1.3,
        1.5,
        1.6,
        1.8,
        2.0,
        2.2,
        2.4,
        2.7,
        3.0,
        3.3,
        3.6,
        3.9,
        4.3,
        4.7,
        5.1,
        5.6,
        6.2,
        6.8,
        7.5,
        8.2,
        9.1,
    ];

    const handleOnChange = (event: ChangeEvent<HTMLFormElement>) => {
        const formValues = [
            parseFloat(event.currentTarget.in_min.value),
            parseFloat(event.currentTarget.in_max.value),
            parseFloat(event.currentTarget.out_min.value),
            parseFloat(event.currentTarget.out_max.value),
            parseFloat(event.currentTarget.v_bias.value),
        ];

        const isCompleteForm = !formValues.some(isNaN);

        if (!isCompleteForm) {return};
        
        const table = getTable(
            parseFloat(event.currentTarget.in_min.value),
            parseFloat(event.currentTarget.in_max.value),
            parseFloat(event.currentTarget.out_min.value),
            parseFloat(event.currentTarget.out_max.value),
            parseFloat(event.currentTarget.v_bias.value),
            baseValues
        );

        setTable(compare(table, values));
    }

    const getTable = (IN_min: number, IN_max: number, OUT_min: number, OUT_max: number, V_bias: number, baseValues: number[]): [number, number, number][] => {
        const K = (OUT_max - OUT_min - IN_max + IN_min) / (IN_max - IN_min);
    
        const S = baseValues.map(b => {
    
            return [b, 
    
                (IN_max * (1+ K) - OUT_max) === 0 
                    ? 1E+99
                    : (	(K   	*	V_bias  *	b)	/	(	(	(	IN_max  *   (	1	+   K		)	)	-	OUT_max	)	)	-	b	)
            ];
        }).map(([b, s]) => {
            const one = b;
            const two = s;
            const three = IN_max * (1+ K)-OUT_max === 0
                ? K * b
                : (	K 	*   b       *  s )   /   (  b       +   s);
            return [one, three, two];
        }).map(([a,b,c]) => {
            return [a, b, c === 1E+99 ? 'no bias' : c]
        });
    
        const ones: [number, number, number][] = S.map(([a,b,c]) => [(a as number) * 1000, (b as number) * 1000, (c as number) * 1000]);
        const tens: [number, number, number][] = S.map(([a,b,c]) => [(a as number) * 10*1000, (b as number) * 10*1000, (c as number) * 10*1000]);
    
        return [...ones, ...tens];
    }

    const compare = (table, values): TableRow[] => {
        return table.map(([ground, feedback, bias]) => {
            const groundRange1 = [ ground-(ground*0.01), ground+(ground*0.01) ];
            const groundRange5 = [ ground-(ground*0.05), ground+(ground*0.05) ];
            const groundRange10 = [ ground-(ground*0.1), ground+(ground*0.1) ];
    
            const feedbackRange1 = [ feedback-(feedback*0.01), feedback+(feedback*0.01) ];
            const feedbackRange5 = [ feedback-(feedback*0.05), feedback+(feedback*0.05) ];
            const feedbackRange10 = [ feedback-(feedback*0.1), feedback+(feedback*0.1) ];
    
    
            const biasRange1 = [ bias-(bias*0.01), bias+(bias*0.01) ];
            const biasRange5 = [ bias-(bias*0.05), bias+(bias*0.05) ];
            const biasRange10 = [ bias-(bias*0.1), bias+(bias*0.1) ];
    
            const g = [ground, null];
    
            for (let item of values) {
                if (item.value === ground) {
                    g[1] = {...item, tolerance: '0%'};
    
                } else if (item.value >= groundRange1[0] && item.value <= groundRange1[1]) {
                    if (g[1] !== null) {
    
                        if (Math.abs(g[0] - g[1].value) > Math.abs( g[0] - item.value)) {
                            g[1] = {...item, tolerance: '1%'};	
                        }
                    } else {
                        g[1] = {...item, tolerance: '1%'};	
                    }
                    
                } else if (item.value >= groundRange5[0] && item.value <= groundRange5[1]) {
                    if (g[1] !== null) {
                        if (Math.abs(g[0] - g[1].value) > Math.abs( g[0] - item.value)) {
                            g[1] = {...item, tolerance: '5%'};	
                        }
                    } else {
                        g[1] = {...item, tolerance: '5%'};	
                    }
    
                } else if (item.value >= groundRange10[0] && item.value <= groundRange10[1]) {
                    if (g[1] !== null) {
                        if (Math.abs(g[0] - g[1].value) > Math.abs( g[0] - item.value)) {
                            g[1] = {...item, tolerance: '10%'};	
                        }
                    } else {
                        g[1] = {...item, tolerance: '10%'};	
                    }
    
                }
                
            }
    
            const f = [feedback, null];
    
            for (let item of values) {
                if (item.value === feedback) {
                    f[1] = {...item, tolerance: '0%'};	
    
                } else if (item.value >= feedbackRange1[0] && item.value <= feedbackRange1[1]) {
                    if (f[1] !== null) {
                        if (Math.abs(f[0] - f[1].value) > Math.abs( f[0] - item.value)) {
                            f[1] = {...item, tolerance: '1%'};	
                        }
                    } else {
                        f[1] = {...item, tolerance: '1%'};	
                    }
    
                } else if (item.value >= feedbackRange5[0] && item.value <= feedbackRange5[1]) {
                    if (f[1] !== null) {
                        if (Math.abs(f[0] - f[1].value) > Math.abs( f[0] - item.value)) {
                            f[1] = {...item, tolerance: '5%'};	
                        }
                    } else {
                        f[1] = {...item, tolerance: '5%'};	
                    }

                } else if (item.value >= feedbackRange10[0] && item.value <= feedbackRange10[1]) {
                    if (f[1] !== null) {
                        if (Math.abs(f[0] - f[1].value) > Math.abs( f[0] - item.value)) {
                            f[1] = {...item, tolerance: '10%'};	
                        }
                    } else {
                        f[1] = {...item, tolerance: '10%'};	
                    }
                } else {
                    continue;
                }
                
            }
    
    
            const b = [bias, null];
    
            for (let item of values) {
    
                if (item.value === bias) {
                    b[1] = {...item, tolerance: '0%'};
    
                } else if (item.value >= biasRange1[0] && item.value <= biasRange1[1]) {
                    if (b[1] !== null) {
                        if (Math.abs(b[0] - b[1].value) > Math.abs( b[0] - item.value)) {
                            b[1] = {...item, tolerance: '1%'};	
                        }
                    } else {
                        b[1] = {...item, tolerance: '1%'};	
                    }
    
                } else if (item.value >= biasRange5[0] && item.value <= biasRange5[1]) {
                    if (b[1] !== null) {
                        if (Math.abs(b[0] - b[1].value) > Math.abs( b[0] - item.value)) {
                            b[1] = {...item, tolerance: '10%'};	
                        }
                    } else {
                        b[1] = {...item, tolerance: '10%'};	
                    }
    
                } else if (item.value >= biasRange10[0] && item.value <= biasRange10[1]) {
                    if (b[1] !== null) {
                        if (Math.abs(b[0] - b[1].value) > Math.abs( b[0] - item.value)) {
                            b[1] = {...item, tolerance: '10%'};	
                        }
                    } else {
                        b[1] = {...item, tolerance: '10%'};	
                    }
    
                } else {
                    continue;
                }
                
            }
    
            return [g, f, b];
    
        });
    }

    return (
        <article className="level-shifter">
            <header className="level-shifter__header">
                <svg width="347" height="267" viewBox="0 0 347 267" fill="none">
                    <rect width="347" height="267" fill="white"/>
                    <line x1="29" y1="175" x2="45" y2="175" stroke="#263238" strokeWidth="2"/>
                    <line x1="31" y1="179" x2="43" y2="179" stroke="#263238" strokeWidth="2"/>
                    <line x1="33" y1="183" x2="41" y2="183" stroke="#263238" strokeWidth="2"/>
                    <circle cx="282.5" cy="56" r="3.5" fill="white" stroke="#263238" strokeWidth="2"/>
                    <circle cx="125" cy="226.5" r="3.5" fill="white" stroke="#263238" strokeWidth="2"/>
                    <circle cx="52.5" cy="37" r="3.5" fill="white" stroke="#263238" strokeWidth="2"/>
                    <circle cx="229" cy="56" r="4.5" fill="#263238"/>
                    <circle cx="125" cy="115.5" r="4.5" fill="#263238"/>
                    <path d="M142 90.3275V21.6725L205.887 56L142 90.3275Z" stroke="#263238" strokeWidth="2"/>
                    <path d="M153.094 37.3438V38.75H150.75V41.1094H149.344V38.75H147V37.3438H149.344V35H150.75V37.3438H153.094Z" fill="#263238"/>
                    <path d="M152.703 75.3438V76.75H148V75.3438H152.703Z" fill="#263238"/>
                    <path d="M38.5469 31.9922V32.918C38.6719 32.7617 38.832 32.6055 39.0273 32.4492C39.2227 32.2852 39.4414 32.1484 39.6836 32.0391C39.9336 31.9297 40.1914 31.875 40.457 31.875C40.8555 31.875 41.2188 31.9648 41.5469 32.1445C41.875 32.3164 42.1367 32.582 42.332 32.9414C42.5273 33.293 42.625 33.7383 42.625 34.2773V37.8516H41.6641L41.6523 34.3711C41.6523 33.8633 41.5391 33.4766 41.3125 33.2109C41.0938 32.9453 40.7539 32.8125 40.293 32.8125C39.9805 32.8125 39.668 32.9297 39.3555 33.1641C39.0508 33.3906 38.7812 33.6562 38.5469 33.9609V37.8516H37.5859V31.9922H38.5469Z" fill="#263238"/>
                    <path d="M34.9141 29.1797C35.1406 29.1797 35.3281 29.2617 35.4766 29.4258C35.6328 29.582 35.7109 29.7656 35.7109 29.9766C35.7109 30.1797 35.6328 30.3633 35.4766 30.5273C35.3281 30.6914 35.1406 30.7734 34.9141 30.7734C34.6875 30.7734 34.4961 30.6914 34.3398 30.5273C34.1914 30.3633 34.1172 30.1797 34.1172 29.9766C34.1172 29.7656 34.1914 29.582 34.3398 29.4258C34.4961 29.2617 34.6875 29.1797 34.9141 29.1797ZM35.5117 31.9922V37.8516H34.5508V32.8945H33.625V31.9922H35.5117Z" fill="#263238"/>
                    <path d="M32.8633 27L29.1953 34.8516H28.668L25 27H26.2656L28.9141 33.0703L31.5977 27H32.8633Z" fill="#263238"/>
                    <path d="M318.492 48.3047V49.9922H320.203V50.8945H318.492V54.3281C318.492 54.5703 318.555 54.7617 318.68 54.9023C318.805 55.043 318.996 55.1133 319.254 55.1133C319.488 55.1133 319.684 55.0859 319.84 55.0312C319.996 54.9688 320.133 54.9023 320.25 54.832V55.6172C320.094 55.7422 319.926 55.8398 319.746 55.9102C319.574 55.9883 319.34 56.0273 319.043 56.0273C318.543 56.0273 318.164 55.8789 317.906 55.582C317.656 55.2773 317.531 54.875 317.531 54.375V50.8945H316.406V50.6133C316.789 50.4414 317.109 50.1602 317.367 49.7695C317.625 49.3711 317.852 48.8828 318.047 48.3047H318.492Z" fill="#263238"/>
                    <path d="M315.059 49.9922V53.4609C315.059 53.9766 314.949 54.4219 314.73 54.7969C314.512 55.1719 314.215 55.4609 313.84 55.6641C313.465 55.8672 313.043 55.9688 312.574 55.9688C312.105 55.9688 311.684 55.8672 311.309 55.6641C310.934 55.4609 310.637 55.1719 310.418 54.7969C310.199 54.4219 310.09 53.9766 310.09 53.4609V49.9922H311.086V53.4609C311.086 53.9688 311.234 54.3594 311.531 54.6328C311.836 54.8984 312.184 55.0312 312.574 55.0312C312.965 55.0312 313.309 54.8984 313.605 54.6328C313.91 54.3594 314.062 53.9688 314.062 53.4609V49.9922H315.059Z" fill="#263238"/>
                    <path d="M305.625 49.875C306.219 49.875 306.746 50.0156 307.207 50.2969C307.668 50.5781 308.027 50.9531 308.285 51.4219C308.551 51.8906 308.684 52.4023 308.684 52.957C308.684 53.5117 308.551 54.0234 308.285 54.4922C308.027 54.9531 307.668 55.3242 307.207 55.6055C306.746 55.8867 306.219 56.0273 305.625 56.0273C305.031 56.0273 304.504 55.8867 304.043 55.6055C303.582 55.3242 303.219 54.9531 302.953 54.4922C302.695 54.0234 302.566 53.5117 302.566 52.957C302.566 52.4023 302.695 51.8906 302.953 51.4219C303.219 50.9531 303.582 50.5781 304.043 50.2969C304.504 50.0156 305.031 49.875 305.625 49.875ZM305.625 50.8125C305.211 50.8125 304.848 50.9141 304.535 51.1172C304.223 51.3125 303.98 51.5742 303.809 51.9023C303.645 52.2227 303.562 52.5742 303.562 52.957C303.562 53.332 303.645 53.6836 303.809 54.0117C303.98 54.332 304.223 54.5938 304.535 54.7969C304.848 54.9922 305.211 55.0898 305.625 55.0898C306.047 55.0898 306.41 54.9922 306.715 54.7969C307.027 54.5938 307.266 54.332 307.43 54.0117C307.602 53.6836 307.688 53.332 307.688 52.957C307.688 52.5742 307.602 52.2227 307.43 51.9023C307.266 51.5742 307.027 51.3125 306.715 51.1172C306.41 50.9141 306.047 50.8125 305.625 50.8125Z" fill="#263238"/>
                    <path d="M301.863 45L298.195 52.8516H297.668L294 45H295.266L297.914 51.0703L300.598 45H301.863Z" fill="#263238"/>
                    <line x1="141" y1="37" x2="56" y2="37" stroke="#263238" strokeWidth="2"/>
                    <line x1="141" y1="76" x2="124" y2="76" stroke="#263238" strokeWidth="2"/>
                    <line x1="230" y1="116" x2="36" y2="116" stroke="#263238" strokeWidth="2"/>
                    <line x1="279" y1="56" x2="206" y2="56" stroke="#263238" strokeWidth="2"/>
                    <line x1="125" y1="75" x2="125" y2="224" stroke="#263238" strokeWidth="2"/>
                    <line x1="229" y1="55" x2="229" y2="116" stroke="#263238" strokeWidth="2"/>
                    <line x1="37" y1="115" x2="37" y2="176" stroke="#263238" strokeWidth="2"/>
                    <rect x="155" y="123" width="14" height="44" transform="rotate(-90 155 123)" fill="white" stroke="#263238" strokeWidth="2"/>
                    <rect x="51" y="123" width="14" height="44" transform="rotate(-90 51 123)" fill="white" stroke="#263238" strokeWidth="2"/>
                    <rect x="132" y="198" width="14" height="44" transform="rotate(180 132 198)" fill="white" stroke="#263238" strokeWidth="2"/>
                    <path d="M109.094 173.875C109.438 173.875 109.758 173.926 110.055 174.027C110.352 174.121 110.566 174.219 110.699 174.32V175.352C110.535 175.227 110.312 175.105 110.031 174.988C109.75 174.871 109.461 174.812 109.164 174.812C108.797 174.812 108.52 174.898 108.332 175.07C108.152 175.242 108.062 175.422 108.062 175.609C108.062 175.758 108.113 175.91 108.215 176.066C108.324 176.215 108.512 176.336 108.777 176.43L109.762 176.781C110.145 176.914 110.43 177.105 110.617 177.355C110.805 177.605 110.898 177.898 110.898 178.234C110.898 178.562 110.805 178.863 110.617 179.137C110.438 179.41 110.184 179.629 109.855 179.793C109.535 179.949 109.164 180.027 108.742 180.027C108.516 180.027 108.277 179.996 108.027 179.934C107.785 179.879 107.566 179.812 107.371 179.734C107.176 179.648 107.031 179.574 106.938 179.512V178.48C107.047 178.559 107.199 178.648 107.395 178.75C107.598 178.844 107.812 178.926 108.039 178.996C108.266 179.059 108.477 179.09 108.672 179.09C109.039 179.09 109.328 179.008 109.539 178.844C109.758 178.68 109.867 178.477 109.867 178.234C109.867 178.047 109.793 177.898 109.645 177.789C109.504 177.68 109.297 177.574 109.023 177.473L108.156 177.156C107.703 176.984 107.402 176.77 107.254 176.512C107.105 176.246 107.031 175.945 107.031 175.609C107.031 175.109 107.219 174.695 107.594 174.367C107.969 174.039 108.469 173.875 109.094 173.875Z" fill="black"/>
                    <path d="M102.473 173.875C102.809 173.875 103.148 173.957 103.492 174.121C103.844 174.277 104.145 174.496 104.395 174.777V173.992H105.355V179.852H104.395V178.855C104.191 179.168 103.914 179.441 103.562 179.676C103.219 179.91 102.824 180.027 102.379 180.027C101.879 180.027 101.422 179.902 101.008 179.652C100.594 179.395 100.262 179.039 100.012 178.586C99.7695 178.133 99.6484 177.609 99.6484 177.016C99.6484 176.367 99.7695 175.809 100.012 175.34C100.262 174.871 100.602 174.512 101.031 174.262C101.461 174.004 101.941 173.875 102.473 173.875ZM102.648 174.812C102.227 174.812 101.867 174.918 101.57 175.129C101.273 175.34 101.043 175.613 100.879 175.949C100.723 176.277 100.645 176.633 100.645 177.016C100.645 177.391 100.723 177.738 100.879 178.059C101.035 178.371 101.254 178.621 101.535 178.809C101.824 178.996 102.156 179.09 102.531 179.09C102.891 179.09 103.211 178.996 103.492 178.809C103.773 178.621 103.996 178.363 104.16 178.035C104.324 177.699 104.402 177.324 104.395 176.91L104.383 175.785C104.141 175.48 103.879 175.242 103.598 175.07C103.324 174.898 103.008 174.812 102.648 174.812Z" fill="black"/>
                    <path d="M97.3867 171.18C97.6133 171.18 97.8008 171.262 97.9492 171.426C98.1055 171.582 98.1836 171.766 98.1836 171.977C98.1836 172.18 98.1055 172.363 97.9492 172.527C97.8008 172.691 97.6133 172.773 97.3867 172.773C97.1602 172.773 96.9688 172.691 96.8125 172.527C96.6641 172.363 96.5898 172.18 96.5898 171.977C96.5898 171.766 96.6641 171.582 96.8125 171.426C96.9688 171.262 97.1602 171.18 97.3867 171.18ZM97.9844 173.992V179.852H97.0234V174.895H96.0977V173.992H97.9844Z" fill="black"/>
                    <path d="M92.043 173.875C92.582 173.875 93.0625 174.004 93.4844 174.262C93.9141 174.512 94.25 174.871 94.4922 175.34C94.7422 175.809 94.8672 176.367 94.8672 177.016C94.8672 177.609 94.7422 178.133 94.4922 178.586C94.25 179.039 93.9219 179.395 93.5078 179.652C93.1016 179.902 92.6445 180.027 92.1367 180.027C91.6914 180.027 91.293 179.91 90.9414 179.676C90.5977 179.441 90.3242 179.168 90.1211 178.855V179.852H89.1602V171.414H90.1211V174.777C90.3711 174.496 90.668 174.277 91.0117 174.121C91.3633 173.957 91.707 173.875 92.043 173.875ZM91.8672 174.824C91.5078 174.824 91.1914 174.91 90.918 175.082C90.6445 175.246 90.3828 175.48 90.1328 175.785L90.1211 176.91C90.1211 177.324 90.1992 177.695 90.3555 178.023C90.5195 178.352 90.7422 178.609 91.0234 178.797C91.3125 178.984 91.6328 179.078 91.9844 179.078C92.3672 179.078 92.6992 178.984 92.9805 178.797C93.2617 178.609 93.4805 178.359 93.6367 178.047C93.793 177.734 93.8711 177.391 93.8711 177.016C93.8711 176.633 93.7891 176.277 93.625 175.949C93.4688 175.613 93.2422 175.344 92.9453 175.141C92.6484 174.93 92.2891 174.824 91.8672 174.824Z" fill="black"/>
                    <path d="M85.0117 169C85.4648 169 85.8984 169.086 86.3125 169.258C86.7266 169.422 87.0664 169.68 87.332 170.031C87.6055 170.375 87.7422 170.816 87.7422 171.355C87.7422 171.84 87.6016 172.25 87.3203 172.586C87.0469 172.922 86.6953 173.176 86.2656 173.348C85.8438 173.512 85.4062 173.594 84.9531 173.594C84.8125 173.594 84.625 173.586 84.3906 173.57L88.0469 176.852H86.4297L83.0547 173.57V176.852H82V169H85.0117ZM83.0547 169.996V172.516C83.3125 172.586 83.5938 172.641 83.8984 172.68C84.2031 172.719 84.5039 172.738 84.8008 172.738C85.3945 172.738 85.8516 172.613 86.1719 172.363C86.5 172.113 86.6641 171.777 86.6641 171.355C86.6641 170.918 86.4844 170.582 86.125 170.348C85.7734 170.113 85.3438 169.996 84.8359 169.996H83.0547Z" fill="black"/>
                    <path d="M137.91 239.875C138.254 239.875 138.574 239.926 138.871 240.027C139.168 240.121 139.383 240.219 139.516 240.32V241.352C139.352 241.227 139.129 241.105 138.848 240.988C138.566 240.871 138.277 240.812 137.98 240.812C137.613 240.812 137.336 240.898 137.148 241.07C136.969 241.242 136.879 241.422 136.879 241.609C136.879 241.758 136.93 241.91 137.031 242.066C137.141 242.215 137.328 242.336 137.594 242.43L138.578 242.781C138.961 242.914 139.246 243.105 139.434 243.355C139.621 243.605 139.715 243.898 139.715 244.234C139.715 244.562 139.621 244.863 139.434 245.137C139.254 245.41 139 245.629 138.672 245.793C138.352 245.949 137.98 246.027 137.559 246.027C137.332 246.027 137.094 245.996 136.844 245.934C136.602 245.879 136.383 245.812 136.188 245.734C135.992 245.648 135.848 245.574 135.754 245.512V244.48C135.863 244.559 136.016 244.648 136.211 244.75C136.414 244.844 136.629 244.926 136.855 244.996C137.082 245.059 137.293 245.09 137.488 245.09C137.855 245.09 138.145 245.008 138.355 244.844C138.574 244.68 138.684 244.477 138.684 244.234C138.684 244.047 138.609 243.898 138.461 243.789C138.32 243.68 138.113 243.574 137.84 243.473L136.973 243.156C136.52 242.984 136.219 242.77 136.07 242.512C135.922 242.246 135.848 241.945 135.848 241.609C135.848 241.109 136.035 240.695 136.41 240.367C136.785 240.039 137.285 239.875 137.91 239.875Z" fill="black"/>
                    <path d="M131.289 239.875C131.625 239.875 131.965 239.957 132.309 240.121C132.66 240.277 132.961 240.496 133.211 240.777V239.992H134.172V245.852H133.211V244.855C133.008 245.168 132.73 245.441 132.379 245.676C132.035 245.91 131.641 246.027 131.195 246.027C130.695 246.027 130.238 245.902 129.824 245.652C129.41 245.395 129.078 245.039 128.828 244.586C128.586 244.133 128.465 243.609 128.465 243.016C128.465 242.367 128.586 241.809 128.828 241.34C129.078 240.871 129.418 240.512 129.848 240.262C130.277 240.004 130.758 239.875 131.289 239.875ZM131.465 240.812C131.043 240.812 130.684 240.918 130.387 241.129C130.09 241.34 129.859 241.613 129.695 241.949C129.539 242.277 129.461 242.633 129.461 243.016C129.461 243.391 129.539 243.738 129.695 244.059C129.852 244.371 130.07 244.621 130.352 244.809C130.641 244.996 130.973 245.09 131.348 245.09C131.707 245.09 132.027 244.996 132.309 244.809C132.59 244.621 132.812 244.363 132.977 244.035C133.141 243.699 133.219 243.324 133.211 242.91L133.199 241.785C132.957 241.48 132.695 241.242 132.414 241.07C132.141 240.898 131.824 240.812 131.465 240.812Z" fill="black"/>
                    <path d="M126.203 237.18C126.43 237.18 126.617 237.262 126.766 237.426C126.922 237.582 127 237.766 127 237.977C127 238.18 126.922 238.363 126.766 238.527C126.617 238.691 126.43 238.773 126.203 238.773C125.977 238.773 125.785 238.691 125.629 238.527C125.48 238.363 125.406 238.18 125.406 237.977C125.406 237.766 125.48 237.582 125.629 237.426C125.785 237.262 125.977 237.18 126.203 237.18ZM126.801 239.992V245.852H125.84V240.895H124.914V239.992H126.801Z" fill="black"/>
                    <path d="M120.859 239.875C121.398 239.875 121.879 240.004 122.301 240.262C122.73 240.512 123.066 240.871 123.309 241.34C123.559 241.809 123.684 242.367 123.684 243.016C123.684 243.609 123.559 244.133 123.309 244.586C123.066 245.039 122.738 245.395 122.324 245.652C121.918 245.902 121.461 246.027 120.953 246.027C120.508 246.027 120.109 245.91 119.758 245.676C119.414 245.441 119.141 245.168 118.938 244.855V245.852H117.977V237.414H118.938V240.777C119.188 240.496 119.484 240.277 119.828 240.121C120.18 239.957 120.523 239.875 120.859 239.875ZM120.684 240.824C120.324 240.824 120.008 240.91 119.734 241.082C119.461 241.246 119.199 241.48 118.949 241.785L118.938 242.91C118.938 243.324 119.016 243.695 119.172 244.023C119.336 244.352 119.559 244.609 119.84 244.797C120.129 244.984 120.449 245.078 120.801 245.078C121.184 245.078 121.516 244.984 121.797 244.797C122.078 244.609 122.297 244.359 122.453 244.047C122.609 243.734 122.688 243.391 122.688 243.016C122.688 242.633 122.605 242.277 122.441 241.949C122.285 241.613 122.059 241.344 121.762 241.141C121.465 240.93 121.105 240.824 120.684 240.824Z" fill="black"/>
                    <path d="M116.863 235L113.195 242.852H112.668L109 235H110.266L112.914 241.07L115.598 235H116.863Z" fill="black"/>
                    <path d="M95.1055 90.4141V98.8516H94.1445V97.8555C93.9414 98.168 93.6641 98.4414 93.3125 98.6758C92.9688 98.9102 92.5742 99.0273 92.1289 99.0273C91.6289 99.0273 91.1719 98.9023 90.7578 98.6523C90.3438 98.3945 90.0117 98.0391 89.7617 97.5859C89.5195 97.1328 89.3984 96.6094 89.3984 96.0156C89.3984 95.3672 89.5195 94.8086 89.7617 94.3398C90.0117 93.8711 90.3516 93.5117 90.7812 93.2617C91.2109 93.0039 91.6914 92.875 92.2227 92.875C92.5586 92.875 92.8984 92.957 93.2422 93.1211C93.5938 93.2773 93.8945 93.4961 94.1445 93.7773V90.4141H95.1055ZM92.3984 93.8359C91.9766 93.8359 91.6172 93.9414 91.3203 94.1523C91.0234 94.3555 90.793 94.6211 90.6289 94.9492C90.4727 95.2773 90.3945 95.6328 90.3945 96.0156C90.3945 96.3906 90.4727 96.7383 90.6289 97.0586C90.7852 97.3711 91.0039 97.6211 91.2852 97.8086C91.5742 97.9961 91.9062 98.0898 92.2812 98.0898C92.6406 98.0898 92.9609 97.9961 93.2422 97.8086C93.5234 97.6211 93.7461 97.3633 93.9102 97.0352C94.0742 96.6992 94.1523 96.3242 94.1445 95.9102L94.1328 94.7852C93.8906 94.4805 93.6289 94.2461 93.3477 94.082C93.0742 93.918 92.7578 93.8359 92.3984 93.8359Z" fill="black"/>
                    <path d="M83.9141 92.9922V93.918C84.0391 93.7617 84.1992 93.6055 84.3945 93.4492C84.5898 93.2852 84.8086 93.1484 85.0508 93.0391C85.3008 92.9297 85.5586 92.875 85.8242 92.875C86.2227 92.875 86.5859 92.9648 86.9141 93.1445C87.2422 93.3164 87.5039 93.582 87.6992 93.9414C87.8945 94.293 87.9922 94.7383 87.9922 95.2773V98.8516H87.0312L87.0195 95.3711C87.0195 94.8633 86.9062 94.4766 86.6797 94.2109C86.4609 93.9453 86.1211 93.8125 85.6602 93.8125C85.3477 93.8125 85.0352 93.9297 84.7227 94.1641C84.418 94.3906 84.1484 94.6562 83.9141 94.9609V98.8516H82.9531V92.9922H83.9141Z" fill="black"/>
                    <path d="M81.1367 92.9922V96.4609C81.1367 96.9766 81.0273 97.4219 80.8086 97.7969C80.5898 98.1719 80.293 98.4609 79.918 98.6641C79.543 98.8672 79.1211 98.9688 78.6523 98.9688C78.1836 98.9688 77.7617 98.8672 77.3867 98.6641C77.0117 98.4609 76.7148 98.1719 76.4961 97.7969C76.2773 97.4219 76.168 96.9766 76.168 96.4609V92.9922H77.1641V96.4609C77.1641 96.9688 77.3125 97.3594 77.6094 97.6328C77.9141 97.8984 78.2617 98.0312 78.6523 98.0312C79.043 98.0312 79.3867 97.8984 79.6836 97.6328C79.9883 97.3594 80.1406 96.9688 80.1406 96.4609V92.9922H81.1367Z" fill="black"/>
                    <path d="M71.7031 92.875C72.2969 92.875 72.8242 93.0156 73.2852 93.2969C73.7461 93.5781 74.1055 93.9531 74.3633 94.4219C74.6289 94.8906 74.7617 95.4023 74.7617 95.957C74.7617 96.5117 74.6289 97.0234 74.3633 97.4922C74.1055 97.9531 73.7461 98.3242 73.2852 98.6055C72.8242 98.8867 72.2969 99.0273 71.7031 99.0273C71.1094 99.0273 70.582 98.8867 70.1211 98.6055C69.6602 98.3242 69.2969 97.9531 69.0312 97.4922C68.7734 97.0234 68.6445 96.5117 68.6445 95.957C68.6445 95.4023 68.7734 94.8906 69.0312 94.4219C69.2969 93.9531 69.6602 93.5781 70.1211 93.2969C70.582 93.0156 71.1094 92.875 71.7031 92.875ZM71.7031 93.8125C71.2891 93.8125 70.9258 93.9141 70.6133 94.1172C70.3008 94.3125 70.0586 94.5742 69.8867 94.9023C69.7227 95.2227 69.6406 95.5742 69.6406 95.957C69.6406 96.332 69.7227 96.6836 69.8867 97.0117C70.0586 97.332 70.3008 97.5938 70.6133 97.7969C70.9258 97.9922 71.2891 98.0898 71.7031 98.0898C72.125 98.0898 72.4883 97.9922 72.793 97.7969C73.1055 97.5938 73.3438 97.332 73.5078 97.0117C73.6797 96.6836 73.7656 96.332 73.7656 95.957C73.7656 95.5742 73.6797 95.2227 73.5078 94.9023C73.3438 94.5742 73.1055 94.3125 72.793 94.1172C72.4883 93.9141 72.125 93.8125 71.7031 93.8125Z" fill="black"/>
                    <path d="M65.4102 92.9922V94.1641C65.6367 93.7734 65.9102 93.4609 66.2305 93.2266C66.5508 92.9922 66.8789 92.875 67.2148 92.875C67.4414 92.875 67.6445 92.9141 67.8242 92.9922V94.1055C67.5742 93.957 67.3242 93.8828 67.0742 93.8828C66.6758 93.8828 66.3516 94.0234 66.1016 94.3047C65.8594 94.5859 65.6289 94.9219 65.4102 95.3125V98.8516H64.4492V92.9922H65.4102Z" fill="black"/>
                    <path d="M59.5742 92.875C59.9102 92.875 60.25 92.957 60.5938 93.1211C60.9453 93.2773 61.2461 93.4961 61.4961 93.7773V92.9922H62.457V98.7344C62.457 99.4297 62.3164 100.008 62.0352 100.469C61.7539 100.93 61.3789 101.273 60.9102 101.5C60.4414 101.727 59.9297 101.84 59.375 101.84C59.0156 101.84 58.707 101.797 58.4492 101.711C58.1992 101.633 57.9844 101.531 57.8047 101.406C57.625 101.289 57.4609 101.176 57.3125 101.066V100.035C57.4297 100.121 57.582 100.23 57.7695 100.363C57.9648 100.504 58.1953 100.629 58.4609 100.738C58.7344 100.848 59.0391 100.902 59.375 100.902C59.7578 100.902 60.1094 100.832 60.4297 100.691C60.75 100.551 61.0078 100.344 61.2031 100.07C61.3984 99.7969 61.4961 99.4688 61.4961 99.0859V97.8555C61.293 98.168 61.0156 98.4414 60.6641 98.6758C60.3203 98.9102 59.9258 99.0273 59.4805 99.0273C58.9805 99.0273 58.5234 98.9023 58.1094 98.6523C57.6953 98.3945 57.3633 98.0391 57.1133 97.5859C56.8711 97.1328 56.75 96.6094 56.75 96.0156C56.75 95.3672 56.8711 94.8086 57.1133 94.3398C57.3633 93.8711 57.7031 93.5117 58.1328 93.2617C58.5625 93.0039 59.043 92.875 59.5742 92.875ZM59.75 93.8242C59.3281 93.8242 58.9688 93.9297 58.6719 94.1406C58.375 94.3438 58.1445 94.6133 57.9805 94.9492C57.8242 95.2773 57.7461 95.6328 57.7461 96.0156C57.7461 96.3906 57.8242 96.7344 57.9805 97.0469C58.1367 97.3594 58.3555 97.6094 58.6367 97.7969C58.9258 97.9844 59.2578 98.0781 59.6328 98.0781C59.9922 98.0781 60.3125 97.9844 60.5938 97.7969C60.875 97.6094 61.0977 97.3516 61.2617 97.0234C61.4258 96.6953 61.5039 96.3242 61.4961 95.9102L61.4844 94.7852C61.2422 94.4805 60.9805 94.2461 60.6992 94.082C60.4258 93.9102 60.1094 93.8242 59.75 93.8242Z" fill="black"/>
                    <path d="M53.0117 88C53.4648 88 53.8984 88.0859 54.3125 88.2578C54.7266 88.4219 55.0664 88.6797 55.332 89.0312C55.6055 89.375 55.7422 89.8164 55.7422 90.3555C55.7422 90.8398 55.6016 91.25 55.3203 91.5859C55.0469 91.9219 54.6953 92.1758 54.2656 92.3477C53.8438 92.5117 53.4062 92.5938 52.9531 92.5938C52.8125 92.5938 52.625 92.5859 52.3906 92.5703L56.0469 95.8516H54.4297L51.0547 92.5703V95.8516H50V88H53.0117ZM51.0547 88.9961V91.5156C51.3125 91.5859 51.5938 91.6406 51.8984 91.6797C52.2031 91.7188 52.5039 91.7383 52.8008 91.7383C53.3945 91.7383 53.8516 91.6133 54.1719 91.3633C54.5 91.1133 54.6641 90.7773 54.6641 90.3555C54.6641 89.918 54.4844 89.582 54.125 89.3477C53.7734 89.1133 53.3438 88.9961 52.8359 88.9961H51.0547Z" fill="black"/>
                    <path d="M205.891 133.992L203.172 136.547L206.043 139.852H204.824L202.504 137.18L201.672 137.953V139.852H200.711V131.414H201.672V136.852L204.59 133.992H205.891Z" fill="black"/>
                    <path d="M197.371 133.875C197.801 133.875 198.172 133.945 198.484 134.086C198.797 134.219 199.012 134.34 199.129 134.449V135.422C198.91 135.258 198.66 135.117 198.379 135C198.098 134.875 197.762 134.812 197.371 134.812C196.957 134.812 196.594 134.914 196.281 135.117C195.969 135.312 195.727 135.574 195.555 135.902C195.391 136.223 195.309 136.574 195.309 136.957C195.309 137.332 195.391 137.684 195.555 138.012C195.727 138.332 195.969 138.594 196.281 138.797C196.594 138.992 196.957 139.09 197.371 139.09C197.762 139.09 198.098 139.031 198.379 138.914C198.66 138.789 198.91 138.645 199.129 138.48V139.453C199.012 139.57 198.797 139.695 198.484 139.828C198.172 139.961 197.801 140.027 197.371 140.027C196.777 140.027 196.25 139.887 195.789 139.605C195.328 139.324 194.965 138.953 194.699 138.492C194.441 138.023 194.312 137.512 194.312 136.957C194.312 136.402 194.441 135.891 194.699 135.422C194.965 134.953 195.328 134.578 195.789 134.297C196.25 134.016 196.777 133.875 197.371 133.875Z" fill="black"/>
                    <path d="M189.848 133.875C190.184 133.875 190.523 133.957 190.867 134.121C191.219 134.277 191.52 134.496 191.77 134.777V133.992H192.73V139.852H191.77V138.855C191.566 139.168 191.289 139.441 190.938 139.676C190.594 139.91 190.199 140.027 189.754 140.027C189.254 140.027 188.797 139.902 188.383 139.652C187.969 139.395 187.637 139.039 187.387 138.586C187.145 138.133 187.023 137.609 187.023 137.016C187.023 136.367 187.145 135.809 187.387 135.34C187.637 134.871 187.977 134.512 188.406 134.262C188.836 134.004 189.316 133.875 189.848 133.875ZM190.023 134.812C189.602 134.812 189.242 134.918 188.945 135.129C188.648 135.34 188.418 135.613 188.254 135.949C188.098 136.277 188.02 136.633 188.02 137.016C188.02 137.391 188.098 137.738 188.254 138.059C188.41 138.371 188.629 138.621 188.91 138.809C189.199 138.996 189.531 139.09 189.906 139.09C190.266 139.09 190.586 138.996 190.867 138.809C191.148 138.621 191.371 138.363 191.535 138.035C191.699 137.699 191.777 137.324 191.77 136.91L191.758 135.785C191.516 135.48 191.254 135.242 190.973 135.07C190.699 134.898 190.383 134.812 190.023 134.812Z" fill="black"/>
                    <path d="M183.027 133.875C183.566 133.875 184.047 134.004 184.469 134.262C184.898 134.512 185.234 134.871 185.477 135.34C185.727 135.809 185.852 136.367 185.852 137.016C185.852 137.609 185.727 138.133 185.477 138.586C185.234 139.039 184.906 139.395 184.492 139.652C184.086 139.902 183.629 140.027 183.121 140.027C182.676 140.027 182.277 139.91 181.926 139.676C181.582 139.441 181.309 139.168 181.105 138.855V139.852H180.145V131.414H181.105V134.777C181.355 134.496 181.652 134.277 181.996 134.121C182.348 133.957 182.691 133.875 183.027 133.875ZM182.852 134.824C182.492 134.824 182.176 134.91 181.902 135.082C181.629 135.246 181.367 135.48 181.117 135.785L181.105 136.91C181.105 137.324 181.184 137.695 181.34 138.023C181.504 138.352 181.727 138.609 182.008 138.797C182.297 138.984 182.617 139.078 182.969 139.078C183.352 139.078 183.684 138.984 183.965 138.797C184.246 138.609 184.465 138.359 184.621 138.047C184.777 137.734 184.855 137.391 184.855 137.016C184.855 136.633 184.773 136.277 184.609 135.949C184.453 135.613 184.227 135.344 183.93 135.141C183.633 134.93 183.273 134.824 182.852 134.824Z" fill="black"/>
                    <path d="M178.152 131.414V139.852H177.191V138.855C176.988 139.168 176.711 139.441 176.359 139.676C176.016 139.91 175.621 140.027 175.176 140.027C174.676 140.027 174.219 139.902 173.805 139.652C173.391 139.395 173.059 139.039 172.809 138.586C172.566 138.133 172.445 137.609 172.445 137.016C172.445 136.367 172.566 135.809 172.809 135.34C173.059 134.871 173.398 134.512 173.828 134.262C174.258 134.004 174.738 133.875 175.27 133.875C175.605 133.875 175.945 133.957 176.289 134.121C176.641 134.277 176.941 134.496 177.191 134.777V131.414H178.152ZM175.445 134.836C175.023 134.836 174.664 134.941 174.367 135.152C174.07 135.355 173.84 135.621 173.676 135.949C173.52 136.277 173.441 136.633 173.441 137.016C173.441 137.391 173.52 137.738 173.676 138.059C173.832 138.371 174.051 138.621 174.332 138.809C174.621 138.996 174.953 139.09 175.328 139.09C175.688 139.09 176.008 138.996 176.289 138.809C176.57 138.621 176.793 138.363 176.957 138.035C177.121 137.699 177.199 137.324 177.191 136.91L177.18 135.785C176.938 135.48 176.676 135.246 176.395 135.082C176.121 134.918 175.805 134.836 175.445 134.836Z" fill="black"/>
                    <path d="M168.578 133.875C169.18 133.875 169.68 134 170.078 134.25C170.477 134.5 170.773 134.84 170.969 135.27C171.172 135.699 171.273 136.184 171.273 136.723V137.297H166.773C166.82 137.625 166.934 137.926 167.113 138.199C167.293 138.473 167.527 138.691 167.816 138.855C168.105 139.012 168.438 139.09 168.812 139.09C169.234 139.09 169.629 138.984 169.996 138.773C170.363 138.555 170.672 138.316 170.922 138.059L170.91 139.102C170.801 139.234 170.637 139.375 170.418 139.523C170.207 139.664 169.961 139.781 169.68 139.875C169.406 139.977 169.117 140.027 168.812 140.027C168.219 140.027 167.691 139.887 167.23 139.605C166.77 139.324 166.406 138.953 166.141 138.492C165.883 138.023 165.754 137.512 165.754 136.957C165.754 136.402 165.875 135.891 166.117 135.422C166.359 134.953 166.691 134.578 167.113 134.297C167.543 134.016 168.031 133.875 168.578 133.875ZM168.578 134.812C168.094 134.812 167.695 134.977 167.383 135.305C167.07 135.625 166.875 136.016 166.797 136.477H170.324C170.285 136.094 170.176 135.781 169.996 135.539C169.824 135.297 169.613 135.117 169.363 135C169.113 134.875 168.852 134.812 168.578 134.812Z" fill="black"/>
                    <path d="M161.887 133.875C162.488 133.875 162.988 134 163.387 134.25C163.785 134.5 164.082 134.84 164.277 135.27C164.48 135.699 164.582 136.184 164.582 136.723V137.297H160.082C160.129 137.625 160.242 137.926 160.422 138.199C160.602 138.473 160.836 138.691 161.125 138.855C161.414 139.012 161.746 139.09 162.121 139.09C162.543 139.09 162.938 138.984 163.305 138.773C163.672 138.555 163.98 138.316 164.23 138.059L164.219 139.102C164.109 139.234 163.945 139.375 163.727 139.523C163.516 139.664 163.27 139.781 162.988 139.875C162.715 139.977 162.426 140.027 162.121 140.027C161.527 140.027 161 139.887 160.539 139.605C160.078 139.324 159.715 138.953 159.449 138.492C159.191 138.023 159.062 137.512 159.062 136.957C159.062 136.402 159.184 135.891 159.426 135.422C159.668 134.953 160 134.578 160.422 134.297C160.852 134.016 161.34 133.875 161.887 133.875ZM161.887 134.812C161.402 134.812 161.004 134.977 160.691 135.305C160.379 135.625 160.184 136.016 160.105 136.477H163.633C163.594 136.094 163.484 135.781 163.305 135.539C163.133 135.297 162.922 135.117 162.672 135C162.422 134.875 162.16 134.812 161.887 134.812Z" fill="black"/>
                    <path d="M158.195 133.992V134.895H156.484V139.852H155.523V134.895H154.598V133.992H155.523V133.242C155.523 132.781 155.613 132.406 155.793 132.117C155.973 131.82 156.203 131.602 156.484 131.461C156.766 131.312 157.051 131.238 157.34 131.238C157.738 131.238 158.062 131.344 158.312 131.555V132.398C158.195 132.32 158.055 132.258 157.891 132.211C157.727 132.164 157.562 132.145 157.398 132.152C157.109 132.16 156.883 132.254 156.719 132.434C156.562 132.605 156.484 132.91 156.484 133.348V133.992H158.195Z" fill="black"/>
                    <path d="M151.012 129C151.465 129 151.898 129.086 152.312 129.258C152.727 129.422 153.066 129.68 153.332 130.031C153.605 130.375 153.742 130.816 153.742 131.355C153.742 131.84 153.602 132.25 153.32 132.586C153.047 132.922 152.695 133.176 152.266 133.348C151.844 133.512 151.406 133.594 150.953 133.594C150.812 133.594 150.625 133.586 150.391 133.57L154.047 136.852H152.43L149.055 133.57V136.852H148V129H151.012ZM149.055 129.996V132.516C149.312 132.586 149.594 132.641 149.898 132.68C150.203 132.719 150.504 132.738 150.801 132.738C151.395 132.738 151.852 132.613 152.172 132.363C152.5 132.113 152.664 131.777 152.664 131.355C152.664 130.918 152.484 130.582 152.125 130.348C151.773 130.113 151.344 129.996 150.836 129.996H149.055Z" fill="black"/>
                </svg>
            </header>
            <section className="level-shifter__content">
                <form onChange={handleOnChange} className="level-shifter__form">
                    <fieldset className="level-shifter__fieldset">
                        <legend>In</legend>
                        <LabelInput text="min" type="number" name="in_min" defaultValue={4} />
                        <LabelInput text="max" type="number" name="in_max" defaultValue={6} />
                    </fieldset>
                    <fieldset className="level-shifter__fieldset">
                        <legend>Out</legend>
                        <LabelInput text="min" type="number" name="out_min" defaultValue={0} />
                        <LabelInput text="max" type="number" name="out_max" defaultValue={5} />
                    </fieldset>
                    <fieldset className="level-shifter__fieldset">
                        <legend>Bias</legend>
                        <LabelInput text="volt" type="number" name="v_bias" defaultValue={12}  />
                    </fieldset>
                </form>
            </section>
            <footer className="level-shifter__footer">
                <table className={classVariant('table', ['full', 'stick'])}>
                    <thead className="table__head">
                        <tr>
                            <td className={classVariant('table__data', [])}>R<sub>ground</sub></td>
                            <td colSpan={3}  className={classVariant('table__data', ['begin', 'end'])}>R<sub>feedback</sub></td>
                            <td colSpan={3}  className={classVariant('table__data', [])}>R<sub>bias</sub></td>
                        </tr>
                    </thead>
                    <tbody className="table__body">
                        {table.map(item => (
                            <tr key={`${item.at(0)}${item.at(1)}${item.at(2)}`}>
                                <td className={classVariant('table__data', (item.at(0)?.at(1) as TableFormat)?.active ? ['active'] : [])}>
                                    <strong>{((item.at(0)?.at(0) as number) / 1000).toFixed(1) + 'k'}</strong>
                                </td>

                                
                                <td className={classVariant('table__data', (item.at(1)?.at(1) as TableFormat)?.active ? ['active', 'begin'] : ['begin'])}>
                                    <small>{((item.at(1)?.at(0) as number / 1000).toFixed(3) + 'k')}</small>
                                </td>
                                <td className={classVariant('table__data', (item.at(1)?.at(1) as TableFormat)?.active ? ['active'] : [])}>
                                    <strong>{(item.at(1)?.at(1) as TableFormat)?.text}</strong>
                                </td>
                                <td className={classVariant('table__data', (item.at(1)?.at(1) as TableFormat)?.active ? ['active', 'end'] : ['end'])}>
                                    <small>({(item.at(1)?.at(1) as TableFormat)?.tolerance})</small>
                                </td>
                                

                                <td className={classVariant('table__data', (item.at(2)?.at(1) as TableFormat)?.active ? ['active', 'begin'] : ['begin'])}>
                                    <small>{((item.at(2)?.at(0) as number / 1000).toFixed(3) + 'k')}</small>
                                </td>
                                <td className={classVariant('table__data', (item.at(2)?.at(1) as TableFormat)?.active ? ['active'] : [])}>
                                    <strong>{(item.at(2)?.at(1) as TableFormat)?.text}</strong>
                                </td>
                                <td className={classVariant('table__data', (item.at(2)?.at(1) as TableFormat)?.active ? ['active', 'end'] : ['end'])}>
                                    <small>({(item.at(2)?.at(1) as TableFormat)?.tolerance})</small>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </footer>
        </article>
    );
}
